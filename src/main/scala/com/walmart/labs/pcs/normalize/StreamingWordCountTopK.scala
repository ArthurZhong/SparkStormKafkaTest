package com.walmart.labs.pcs.normalize

import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Seconds, StreamingContext, Minutes}
import org.apache.spark.streaming.StreamingContext._
import org.apache.spark.SparkContext._
import org.apache.spark.storage.StorageLevel

object StreamingWordCountTopK {
  
  def main(args: Array[String]) {
    if (args.length < 2) {
      System.err.println("Usage: NetworkWordCount <hostname> <port>")
      System.exit(1)
    }

//    StreamingExamples.setStreamingLogLevels()

    // Create the context with a 1 second batch size
    val sparkConf = new SparkConf().setAppName("NetworkWordCount")
    val ssc = new StreamingContext(sparkConf, Seconds(1))

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKeyAndWindow(_ + _, Seconds(60)).transform(_.sortByKey(false))
    wordCounts.foreachRDD(rdd => {
      val topList = rdd.take(10)
      println("\nPopular words in last 60 seconds (%s total):".format(rdd.count()))
      topList.foreach{case (word, count) => println("%s : %s".format(word, count))}
    })
    ssc.start()
    ssc.awaitTermination()
  }

}